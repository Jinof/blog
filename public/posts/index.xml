<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Jinof</title>
        <link>https://blog.jinof.now.sh/posts/</link>
        <description>Recent content in Posts on Jinof</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sun, 12 Apr 2020 11:25:07 +0800</lastBuildDate>
        <atom:link href="https://blog.jinof.now.sh/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>My Linux</title>
            <link>https://blog.jinof.now.sh/posts/my-linux/</link>
            <pubDate>Sun, 12 Apr 2020 11:25:07 +0800</pubDate>
            
            <guid>https://blog.jinof.now.sh/posts/my-linux/</guid>
            <description>记录下每次配环境的操作，减少环境配置时间  zsh ssh golang neovim/spacevim   zsh   安装 git 与 zsh
 sudo apt install git zsh   安装 oh-my-zsh
    curl
 sh -c &amp;quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&amp;quot;   wget
 sh -c &amp;quot;$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)&amp;quot;    安装插件    zsh-autosuggestion
 git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions   zsh-syntax-highlighting
 git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting   ssh   配置 ssd_config</description>
            <content type="html"><![CDATA[<h1 id="记录下每次配环境的操作减少环境配置时间">记录下每次配环境的操作，减少环境配置时间</h1>
<ul>
<li><a href="#zsh">zsh</a></li>
<li><a href="#ssh">ssh</a></li>
<li><a href="#golang">golang</a></li>
<li><a href="#neovim">neovim/spacevim</a></li>
</ul>
<hr>
<h2 id="zsh">zsh</h2>
<ul>
<li>
<p>安装 git 与 zsh</p>
<pre><code>  sudo apt install git zsh
</code></pre>
</li>
<li>
<p>安装 oh-my-zsh</p>
</li>
</ul>
<ol>
<li>
<p>curl</p>
<pre><code> sh -c &quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;
</code></pre>
</li>
<li>
<p>wget</p>
<pre><code> sh -c &quot;$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)&quot;
</code></pre>
</li>
</ol>
<ul>
<li>安装插件</li>
</ul>
<ol>
<li>
<p>zsh-autosuggestion</p>
<pre><code> git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions
</code></pre>
</li>
<li>
<p>zsh-syntax-highlighting</p>
<pre><code> git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
</code></pre>
</li>
</ol>
<h2 id="ssh">ssh</h2>
<ol>
<li>
<p>配置 ssd_config</p>
<pre><code> PermitRootLogin yes // 别跟我说 Root不安全，炸了重装就完事了😈
 PubkeyAuthentication yes 
</code></pre>
</li>
<li>
<p>上传公钥文件 将公钥文件追加到 authorized_keys中</p>
</li>
<li>
<p>注意权限 (埋个坑: 为什么权限要这样设置?)</p>
<ol>
<li>.ssh 权限应为 700</li>
<li>authorized_keys 应为 600</li>
</ol>
</li>
</ol>
<hr>
<h2 id="golang">golang</h2>
<ul>
<li>下载安装包</li>
</ul>
<ol>
<li>
<p>curl</p>
<pre><code> curl -O https://dl.google.com/go/go1.14.2.linux-amd64.tar.gz
</code></pre>
</li>
<li>
<p>wget</p>
<pre><code> wget https://dl.google.com/go/go1.14.2.linux-amd64.tar.gz
</code></pre>
</li>
</ol>
<ul>
<li>
<p>解压</p>
<pre><code>  tar -C /usr/local -zxvf go1.4.linux-amd64.tar.gz
</code></pre>
</li>
<li>
<p>配置go环境</p>
<pre><code>  go env -w GO111MODULE=ON
  go env -w GOPROXY=&quot;https://goproxy.cn,direct&quot;
</code></pre>
</li>
</ul>
<h2 id="neovim">neovim</h2>
<blockquote>
<p>本来一直在用vim，neovim更加友好就决定迁移了</p>
<ul>
<li>一些改变:</li>
</ul>
<ol>
<li>默认encoding: neovim <code>utf-8</code>, vim <code>latin1</code></li>
<li>配置目录: neovim $XDG_CONFIG_HOME/nvim/init.vim 和$XDG_CONFIG_HOME/nvim, vim 为$HOME/.vimrc</li>
</ol>
</blockquote>
<ul>
<li>
<p>安装</p>
<pre><code>  sudo apt install neovim
</code></pre>
</li>
<li>
<p>用SpaceVim配置 <a href="https://spacevim.org/cn/">SpaceVim中文文档</a></p>
</li>
</ul>
<blockquote>
<dl>
<dt>什么? 为什么不自己配？</dt>
<dd>我懒😎</dd>
</dl>
</blockquote>
<ol>
<li>
<p>安装</p>
<pre><code> curl -sLf https://spacevim.org/cn/install.sh | bash 
</code></pre>
</li>
<li>
<p>把 vi 或 vim 转为使用 neovim</p>
</li>
</ol>
<blockquote>
<p>你以为我在用 vim， 实际上我用的是 neovim 😎</p>
</blockquote>
<pre><code>    vim ~/.zshrc
    alias vi='nvim'
    alias vim='nvim'
    source ~/.zshrc
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>New Start</title>
            <link>https://blog.jinof.now.sh/posts/new-start/</link>
            <pubDate>Thu, 26 Mar 2020 18:32:01 +0800</pubDate>
            
            <guid>https://blog.jinof.now.sh/posts/new-start/</guid>
            <description>从Hexo迁移到了Hugo
一个全新的舞台，一个全新的开始
从Pythoneer到Gopher
由解释到编译
更大的世界展示在我的眼前
Docker, Kubernetes 运载着我的代码
微服务架构带来全新的挑战
我愿用一行行的代码
写出搭建出一个方舟
站在巨人的肩膀上
眺望远方</description>
            <content type="html"><![CDATA[<p>从Hexo迁移到了Hugo</p>
<p>一个全新的舞台，一个全新的开始</p>
<p>从Pythoneer到Gopher</p>
<p>由解释到编译</p>
<p>更大的世界展示在我的眼前</p>
<p>Docker, Kubernetes 运载着我的代码</p>
<p>微服务架构带来全新的挑战</p>
<p>我愿用一行行的代码</p>
<p>写出搭建出一个方舟</p>
<p>站在巨人的肩膀上</p>
<p>眺望远方</p>
]]></content>
        </item>
        
        <item>
            <title>Use zeit to deploy hugo website</title>
            <link>https://blog.jinof.now.sh/posts/zeit/</link>
            <pubDate>Thu, 26 Mar 2020 18:32:01 +0800</pubDate>
            
            <guid>https://blog.jinof.now.sh/posts/zeit/</guid>
            <description>遇见的神奇Bug 使用如下命令无法在zeit 中正确部署
cd themes;git clone -b master https://github.com/rhazdon/hugo-theme-hello-friend-ng;cd ../;hugo -D --gc 报错如下
23:51:08.330 Error: No Output Directory named &amp;quot;public&amp;quot; found after the Build completed. You can configure the Output Directory in your project settings. Learn more: https://zeit.co/docs/v2/platform/frequently-asked-questions#missing-public-directory解决方式 别用submodule了&amp;hellip;
折腾了半天，改成zeit github上官方示例就成了。所以所以说整骚操作就是白给，跟官方一样才能少踩坑。不用submodule不仅不会碰见这个bug，直接用默认的command就能成功部署，何乐而不为</description>
            <content type="html"><![CDATA[<h2 id="遇见的神奇bug">遇见的神奇Bug</h2>
<p>使用如下命令无法在zeit 中正确部署</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">cd themes;git clone -b master https://github.com/rhazdon/hugo-theme-hello-friend-ng;cd ../;hugo -D --gc 
</code></pre></div><p>报错如下</p>
<pre><code>23:51:08.330  Error: No Output Directory named &quot;public&quot; found after the Build completed. You can configure the Output Directory in your project settings. Learn more: https://zeit.co/docs/v2/platform/frequently-asked-questions#missing-public-directory
</code></pre><h2 id="解决方式">解决方式</h2>
<p>别用submodule了&hellip;</p>
<p>折腾了半天，改成<a href="https://github.com/zeit/now/tree/master/examples/hugo">zeit github上官方示例</a>就成了。所以所以说整骚操作就是白给，跟官方一样才能少踩坑。不用submodule不仅不会碰见这个bug，直接用默认的command就能成功部署，何乐而不为</p>
]]></content>
        </item>
        
    </channel>
</rss>
